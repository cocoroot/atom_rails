# config valid only for current version of Capistrano
lock '3.4.0'

set :application, "<%= config[:project_name] %>"
repo_url = "#{ENV['GIT_REPOSITORY_URL']}".gsub('https://', "https://#{ENV['GIT_HTTPS_USERNAME']}:#{ENV['GIT_HTTPS_PASSWORD']}@")
set :repo_url, repo_url
set :repo_url_, ENV['GIT_REPOSITORY_URL']

set :branch, 'release'

set :deploy_to, '/var/www/app'
set :scm, :git

# Default value for :format is :pretty
# set :format, :pretty

# Default value for :log_level is :debug
# set :log_level, :debug

# Default value for :pty is false
set :pty, true

# Default value for :linked_files is []
set :linked_files, fetch(:linked_files, []).push('config/database.yml', 'config/secrets.yml')

# Default value for linked_dirs is []
# set :linked_dirs, fetch(:linked_dirs, []).push('log', 'tmp/pids', 'tmp/cache', 'tmp/sockets', 'vendor/bundle', 'public/system')

# Default value for default_env is {}
set :default_env, {
      rbenv_root: "~/.rbenv",
      path: "~/.rbenv/shims:~/.rbenv/bin:$PATH",
      database_name:  ENV['DATABASE_NAME'],
      database_host:  ENV['DATABASE_HOST'],
      database_port:  ENV['DATABASE_PORT'],
      database_user:  ENV['DATABASE_USER'],
      database_password:  ENV['DATABASE_PASSWORD'],
      secret_key_base: ENV['SECRET_KEY_BASE']
    }

set :rbenv_path, '~/.rbenv'

# Default value for keep_releases is 5
set :keep_releases, 1


task :info do
  run_locally do
    param_list = [:pty, :stage, :application, :scm, :repo_url_, :branch, :deploy_to, :rails_env, :rbenv_path, :keep_releases]
    key_spacing = param_list.max { |a, b| a.size <=> b.size }.size
    
    param_list.each do |p|
      info "%-#{key_spacing}{key} : %{value}" % { key: p.to_s, value: fetch(p).to_s }
    end
  end
end

after 'deploy:publishing', 'deploy:restart'
before 'deploy:starting', 'deploy:upload'
after 'deploy:finishing', 'deploy:cleanup'
namespace :deploy do
  #set :linked_dirs, (['tmp/pids', 'tmp/sockets'])

  desc 'Create log directories'
  task :log_dir do
    on roles(:app) do |host|
      execute "mkdir -p /var/log/rails/#{fetch(:application)}"
      execute "mkdir -p /var/log/unicorn/#{fetch(:application)}"
    end
  end
  
  desc 'Upload database.yml, secrets.yml'
  task :upload do
    on roles(:app) do |host|
      if test "[ ! -d #{shared_path}/config ]"
        execute "mkdir -p #{shared_path}/config"
      end
      upload!('config/database.yml', "#{shared_path}/config/database.yml")
      upload!('config/secrets.yml', "#{shared_path}/config/secrets.yml")
    end
  end

  task :symlink do
    on_rollback { run "rm #{current_path}; ln -s #{previous_release} #{current_path}"}
    run "rm #{current_path}; ln -s #{release_path} #{current_path}"
  end
  
end

namespace :unicorn do
  # set :unicorn_rack_env, "none"
  set :unicorn_config_path, "config/unicorn.rb"
  
  task :restart do
    invoke 'unicorn:restart'
  end
end

namespace :db do
    task :create do
    on roles :db do
      with rails_env: fetch(:rails_env) do
        within current_path do
          execute :bundle, :exec, :rake, 'db:create'
        end
      end
    end
  end

  task :drop do
    on roles :db do
      with rails_env: fetch(:rails_env) do
        within current_path do
          execute :bundle, :exec, :rake, 'db:drop'
        end
      end
    end
  end

  task :ridgepole do
    on roles :db  do
      within current_path do
        execute :bundle, :exec, :ridgepole, "-E #{fetch(:stage)} -c config/database.yml -f db/Schemafile --apply"
      end
    end
  end

end

FILTER_PARAMETERS = [:database_password]
def filter_parameters(params)
  params.map do |k, v|
    if FILTER_PARAMETERS.include?(k)
      {k => "[FILTERED]"}
    else
      {k => v}
    end
  end
end
